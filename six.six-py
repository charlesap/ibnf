
 syntax ^ .1.1 + .2.1 


 srules ^ .1.1 + .2.1


 blankline  ^   ""


 base  :rbody="  o = \"\"\n  rx="+.2.1+"_r\n  if a != \"\":\n"+.5.1+"  return (o)\n" 
       |def `.2.1`_s(a,m,s,e,c,n):
       |`("  rx="+.2.1+"_r "  if .5.1 != "" else "")`
       |`("  "+.3.1 if .3.1 != "" else "")`
       |  return (T,T,s,e-s,c,( "`.2.1`", `.4.1` ))
       |`("def "+.2.1+"_r(a,m,s,e,c,n):\n"+rbody if .5.1 != "" else "")`

 setup  ^ ( ( .4.1 + "\n  " + .7.1) if .7.1 != "" else .4.1 )

 rsetup ^ ( ( "      "+.4.1 + "      " + .7.1+"\n") if .7.1 != "" else "      "+.4.1+"\n" )

 recr   ^ "    if a[0] ==\"" + .3.1 + "\":\n" + .4.1 + "      o=o+" + .5.1 +"\n"+ .6.1


 cline    ^ .4.1
 

 qlineset ^ "\"" + .1.1 + "\""
 qlines   ^ .2.1 + .3.1 + .4.1
 qlsep    ^ "\\n\" + \\\n\""
 qline    ^ .1.1


 qchs   ^ .1.1 + .2.1
 qq     ^    "\\\""
 qt     ^    "\\\'"
 qs     ^    "\\\\"
 qcode  ^ "\" + " + .3.1 + " + \""
 

 string  ^  "\"" + .2.1 + "\""  
 strcs   ^  .1.1 + .2.1   


 code     ^    .1.1  + .2.1 
 cnl      ^    "\\\n"


 dpathw   ^    "a" + .1.1
 dpath    ^    "[" + .2.1 + "]" + .3.1
 dhas     ^    "a" 


 rca   ^    .3.1 +"_s(" + .7.1 + ",m,s,e,c,n)[5][1]"
 rcb   ^    "rx(" + .3.1 + ",m,s,e,c,n)"


 end |prologue="""import sys
     |from binascii import *
     |fi = file(sys.argv[1]).read()
     |semantics = file(sys.argv[2]).read()
     |fo = open(sys.argv[3], "w+")
     |
     |h={}; registers={}; context={}; mseq=0; dseq=1; T=True; F=False
     |
     |def n2z( a ):
     |  return ( '0' if a=='' else a )
     |
     |def be2le( a ):
     |  return a[6:8]+a[4:6]+a[2:4]+a[0:2]
     |
     |def mark( p, s, t ):
     |  ( v, m, ss, l, c, a ) = t
     |  if t[1]:  x = p +"-" + str(s);  h[x]=(v,m,l,a); return t
     |  else:
     |    if not t[0]:  x = p +"-" + str(s);  h[x]=(v,m,l,a); return t
     |  return t
     |
     |def been(p, s):
     | if h.has_key( p +"-" + str(s) ): return h[p +"-" + str(s)][1]
     | else:  return False
     |
     |def was(c,p,s): (v,m,l,a) = h[p+"-"+str(s)]; return (v,m,s,l,c,a) 
     |
     |def cm( ch, s, c ):
     |  if s < len(fi):
     |    if fi[s] == ch:    return ( T, T, s, 1,  c, ( "cm", fi[s] ) )
     |  return ( False, True, s, 0, c, ( "cm", "") )
     |
     |def andmemo( m ):
     |  r = True
     |  for i in m:
     |    if not m[i]: r = False
     |  return r
     |
     |outdata = ""
     |
     |def output( s ):
     |  global outdata
     |  outdata = outdata + str(s)
     |
     |"""; epilogue="""
     |
     |(v,m,s,l,c,a) = syntax_p( 0, ({},'<1>','<0>') )
     |if v: 
     |  print "Parsed "+a[0]+" OK"
     |else: print "Failed to Parse"
     |print >> fo, a[1] 
     |fo.close()
     |"""

